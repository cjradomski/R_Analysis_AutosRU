install.packages("tidyverse")
install.packages("jsonlite")
setwd("C:/Users/Christian/Desktop/R_Analysis")
setwd("C:/Users/Christian/Desktop/R_Analysis/01_Demo")
x <- 3
x <- 5
numlist <- c(0,1,2,3,4,5,6,7,8,9)
?read.csv()
demo_table <- read.csv(file='demo.csv', check.names=F. stringsAsFactors = F)
demo_table
demo_table <- read.csv(file='demo.csv', check.names=F, stringsAsFactors = F)
View(demo_table)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table)
View(demo_table2)
demo_table[3,"Year"]
View(demo_table)
demo_table[3,3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
View(demo_table2)
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
View(filter_table)
?subset()
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
?sample()
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample <- demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
?mutate()
# Using mutate() to add a column to demo_table
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year), isActive=TRUE)
View(demo_table)
View(demo_table2)
# Create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer))
View(summarize_demo)
# Create summary table groubped by condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), Maximum_Price=max(price), Num_Vehicles=n())
View(summarize_demo)
?gather()
demo_table3 <- read.csv('demo2.csv', check.names = F. stringAsFactors = F)
demo_table3 <- read.csv('demo2.csv', check.names = F, stringAsFactors = F)
demo_table3 <- read.csv('demo2.csv', check.names = F, stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3, key="Metric", value="Score", buying_price:popularity)
View(long_table)
long_table <- gather(demo_table3, key="Metric", value="Score", buying_price:safety_rating)
?spread()
wide_table <- long_table %>% spread(key="Metric", value="Score")
View(wide_table)
all.equal(demo_table3,wide_table)
# If you suspect theyre the same but it shows false try sorting the columns
wide_table <- [,order(colnames(wide_table))]
# If you suspect theyre the same but it shows false try sorting the columns
wide_table <- wide_table[,order(colnames(wide_table))]
# Check to see if the wide table went back to original format
all.equal(demo_table3,wide_table)
demo_table3 <- demo_table3[,order(colnames(demo_table3))]
# Check to see if the wide table went back to original format
all.equal(demo_table3,wide_table)
?ggplot()
head(mpg)
# Make a bar plot that represents the distribution of vehicle classes from the mpg dataset - a dataset built into R
plt <- ggplot(mpg, aes(x=class)) # import the dataset into ggplot2
plt + geom_bar() # plot into bar plot
?geom_bar
# Create a summary table for mpg data by manufacturer
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n())
# Make a bar plot for mpg data by manufacturer
plt <- ggplot(mpg_summary, aes(x=manufacturer,y=Vehicle_Count))
plt + geom_col()
View(mpg_summary)
# Add labels to plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.text.x=element_text(angle=45,hjust=1))
# Make a line graph of avg highway fuel economy of toyota vehicles as a function of different cylinder sizes
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy))
plt <- ggplot(mpg_summary, aes(x=cyl, y=Mean_Hwy))
plt + geom_line()
View(mpg_summary)
# Make y-axis labels more defined and x-labels discrete (categorical)
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
# Make y-axis labels more defined and x-labels discrete (categorical)
plt + geom_line() + scale_x_discrete(limits=c(1,4,6,8)) + scale_y_continuous(breaks = c(15:30))
# Make y-axis labels more defined and x-labels discrete (categorical)
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
# Make a scatter plot to show the size of each car engine vs their city fuel efficiency
plt <- ggplot(mpg, aes(x=displ, y=cty))
plt + geom_point() + xlab("Engine Size (L") + ylab("City Fuel-Efficiency (MPG)")
# Make a scatter plot to show the size of each car engine vs their city fuel efficiency
plt <- ggplot(mpg, aes(x=displ, y=cty))
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
# Make the same scatter plot but with color indicating vehicle class
plt <- ggplot(mpg, aes(x=displ, y=cty, color=class))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
# Make the same scatter plot but with color indicating vehicle class and shape indicating type of drive
plt <- ggplot(mpg, aes(x=displ, y=cty, color=class, shape=drv))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive")
# Skill Drill: Make a visualization that uses City Fuel-Efficieny to determine the size of the data point
plt <- ggplot(mpg, aes(x=displ, y=cty, size=cty))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", size="City Fuel-Efficiency (MPG)")
# Generate a boxplot to visualize the highway fuel efficiency
plt <- ggplot(mpg, aes(y=hwy))
plt + geom_boxplot()
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy, colour = manufacturer))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy, colour = manufacturer, linetype = dashed))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy, colour = manufacturer, linetype = 'dashed'))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy, colour = manufacturer, whisklty = 0))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy, colour = manufacturer))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy, colour = manufacturer))
plt + geom_boxplot(linetype = "dashed") + theme(axis.text.x=element_text(angle=45,hjust=1))
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy, colour = manufacturer))
plt + geom_boxplot(linetype = "dotted") + theme(axis.text.x=element_text(angle=45,hjust=1))
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy, colour = manufacturer))
plt + geom_boxplot(linetype = "dashed") + theme(axis.text.x=element_text(angle=45,hjust=1))
# Generate a heatmap to visualize the average highway fuel efficiency across the type of vehicle class from 1999 to 2008
mpg_summary <- %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy))
plt <- ggplot(mpg_summary, aes(x=class, y=factor(year), fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class", y="Vehicle Year", fill="Mean Highway (MPG)")
View(mpg_summary)
mpg_summary <- %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy))
# Generate a heatmap to visualize the average highway fuel efficiency across the type of vehicle class from 1999 to 2008
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy))
plt <- ggplot(mpg_summary, aes(x=class, y=factor(year), fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class", y="Vehicle Year", fill="Mean Highway (MPG)")
# Generate a heatmap to visualize the average highway fuel efficiency across the type of vehicle model from 1999 to 2008
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy))
plt <- ggplot(mpg_summary, aes(x=model, y=factor(year), fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model", y="Vehicle Year", fill="Mean Highway (MPG)")
# Generate a heatmap to visualize the average highway fuel efficiency across the type of vehicle model from 1999 to 2008
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy))
plt <- ggplot(mpg_summary, aes(x=model, y=factor(year), fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model", y="Vehicle Year", fill="Mean Highway (MPG)") +
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy, colour = manufacturer))
plt + geom_boxplot(linetype = "dashed") + theme(axis.text.x=element_text(angle=45,hjust=1))
# Generate a set of boxplots that compares highway fuel efficiency for each car manufacturer and overlay scatter plot on top
plt <- ggplot(mpg, aes(x=manufacturer,y=hwy))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45, hjust=1)) +
geom_point()
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ))
plt <- ggplot(mpg_summary, aes(x=class, y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class", y="Mean Engine Size")
# Generate a scatter plot that compares average engine size by vehicle class with error bars
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), SD_Engine=sd(displ))
plt <- ggplot(mpg_summary, aes(x=class, y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class", y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_engine-SD_Engine, ymax=Mean_engine+SD_Engine))
# Generate a scatter plot that compares average engine size by vehicle class with error bars
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), SD_Engine=sd(displ))
plt <- ggplot(mpg_summary, aes(x=class, y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class", y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine, ymax=Mean_Engine+SD_Engine))
# Convert mpg to long format
mpg_long <- mpg %>% gather(key="MPG_Type", value="Rating", c(cty,hwy))
head(mpg_long)
# Visualize the different vehicle fuel efficiency ratings by manufacturer
plt <- ggplot(mpg_long, aes(x=manufacturer, y=Rating, color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
?facet_wrap
# Visualize the different vehicle fuel efficiency ratings by manufacturer
plt <- ggplot(mpg_long, aes(x=manufacturer, y=Rating, color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x=element_text(angle=45,hjust=1), legend.position= "none")
# Visualize the different vehicle fuel efficiency ratings by manufacturer and separate by cty and hwy using facet_wrap
plt <- ggplot(mpg_long, aes(x=manufacturer, y=Rating, color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(model)) +
theme(axis.text.x=element_text(angle=45,hjust=1), legend.position= "none")
# Visualize the different vehicle fuel efficiency ratings by manufacturer and separate by cty and hwy using facet_wrap
plt <- ggplot(mpg_long, aes(x=manufacturer, y=Rating, color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(drv)) +
theme(axis.text.x=element_text(angle=45,hjust=1), legend.position= "none")
# Visualize the different vehicle fuel efficiency ratings by manufacturer and separate by cty and hwy using facet_wrap
plt <- ggplot(mpg_long, aes(x=manufacturer, y=Rating, color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x=element_text(angle=45,hjust=1), legend.position= "none")
#Test the distribution of vehicle weight from the *built-in* mtcars dataset
ggplot(mtcars, aes(x=wt)) + geom_density()
?shapiro.test()
# Test the distribution of vehicle weight with the shapiro.test() - the quantitiative test for normality
shapiro.test(mtcars$wt)
?sample_n()
setwd("C:/Users/Christian/Desktop/Analysis Projects/R_Analysis_AutosRUs")
# Visualize the distribution of driven miles for the used vehicle data set
population <- read.csv('used_car_data.csv', check.names = F, stringsAsFacors = F)
plt <- ggplot(population_table, aes(x=log10(Miles_Driven)))
plt + geom_desnity()
# Visualize the distribution of driven miles for the used vehicle data set
population <- read.csv('used_car_data.csv', check.names = F, stringsAsFacors = F)
plt <- ggplot(population_table, aes(x=log10(Miles_Driven)))
plt + geom_density()
# Visualize the distribution of driven miles for the used vehicle data set
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFacors = F)
plt <- ggplot(population_table, aes(x=log10(Miles_Driven)))
plt + geom_density()
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFacors = F)
# Visualize the distribution of driven miles for the used vehicle data set
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
plt <- ggplot(population_table, aes(x=log10(Miles_Driven)))
plt + geom_density()
# Create a sample dataset
sample_table <- population_table %>% sample_n(50) #randomly select 50 data points
plt <- ggplot(sample_table, aes(x=log10(Miles_Driven)))
plt + geom_density()
?t.test
# Perform t-test on Miles driven in sample_table
t.test(log10(sample_table$Miles_Driven), mu=mean(log10(population_table$Miles_Driven)))
# Generate two samples
sample_table <- population_table %>% sample_n(50)
sample_table2 <- population_table %>% sample_n(50)
# Perform two sample t.test on Miles driven in sample_table and sample_table2
t.test(log10(sample_table$Miles_Driven), log10(sample_table2$Miles_Driven))
# Import modified mpg dataset and generate two data samples
mpg_data <- read.csv('mpg_modified.csv')
mpg_1999 <- mpg_data %>% filter(year==1999)
mpg_2008 <- mpg_data %>% filter(year==2008)
# Perform paired t-test to determine if there is a statistical difference in overall highwya fuel efficiency in vehciles made between 1999 vs 2008
t.test(mpg_1999$hwy, mpg_2008$hwy, paired = T)
?aov()
# Clean mtcars *built-in* dataset to prepare for ANOVA
mtcars_filt <- mtcars[,c("hp", "cyl")]
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric cyl column to factor
# Perform ANOVa test to determine if there is any statistical difference in the horsepower of a vehicel based on its engine type (cyl)
aov(hp ~ cyl, data=mtcars_filt)
# Perform ANOVa test to determine if there is any statistical difference in the horsepower of a vehicel based on its engine type (cyl)
summary(aov(hp ~ cyl, data=mtcars_filt))
?cor()
head(mtcars)
# Plot horsepower and quarter-mile race time in the mtcars dataset using geom_point()
plt <- ggplot(mtcars, aes(x=hp, y=qsec))
plt + geom_point()
# Calculate the correlation coefficeint between horsepower and quarter-mile race time
cor(mtcars$hp, mtcars$qsec)
# Read-in used cars dataset
used_cars <- read.csv('used_car_data.csv', stringsAsFactors = F)
head(used_cars)
# Plot vehicle miles driven and selling price
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_Price))
plt + geom_point()
# Calculate the correlation coefficient between vehicle miles driven and selling price
cor(used_cars$Miles_Driven, used_cars$Selling_Price)
# Create a matrix of the numeric columns from the used cars data frame and generate correlation matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price", "Present_Price", "Miles_Driven")])
cor(used_matrix)
?lm()
# Create a linear regression model to test whether or not quarter mile race time can be predicted from horsepower in the mtcars dataset
lm(qsec ~hp, mtcars)
# Create a linear regression model to test whether or not quarter mile race time can be predicted from horsepower in the mtcars dataset
summary(lm(qsec ~hp, mtcars))
# Visualize the fitted line from linear egression model with dataset
model <- lm(qsec ~ hp, mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
# Visualize the fitted line from linear egression model with dataset
model <- lm(qsec ~ hp, mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
plt <- ggplot(mtcars, aes(x=hp, y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
# Create a multiple linear regression model to predict quarter-mile-time
lm(qsec ~ mpg + disp +drat + wt + hp, data=mtcars)
# Generate summary of multiple linear regression model
summary(lm(qsec ~ mpg + disp +drat + wt + hp, data=mtcars))
?chisq.test()
# Build a contingency table for vehicle class across 1999 and 2008 in mpg dataset
table(mpg$class, mpg$year)
# Build a contingency table for vehicle class across 1999 and 2008 in mpg dataset
tbl <- table(mpg$class, mpg$year)
# Perform Chi Squared Test on contingency table
chisq.test(tbl)
# Import MechaCar dataset
mechaCar_data <- read.csv('MechCar_mpg.csv')
head(mechaCar_data)
# Import MechaCar dataset
mechaCar_data <- read.csv('MechaCar_mpg.csv')
# Import MechaCar dataset
mechaCar_data <- read.csv('MechaCar_mpg.csv')
head(mechaCar_data)
# Create a matrix of the numeric columns from the mechaCar data and generate correlation matrix
used_matrix <- as.matrix(mechaCar_data[,c("vehicle.length", "vehicle.weight", "spoiler.angle", "ground.clearance", "mpg")])
cor(used_matrix)
# Create a multiple linear regression model to predict mpg
lm(mpg ~  vehicle.length + vehicle.weight + spoiler.angle + ground.clearance, data=mechaCar_data)
# Generate summary of multiple linear regression model
summary(lm(mpg ~  vehicle.length + vehicle.weight + spoiler.angle + ground.clearance, data=mechaCar_data))
# Import Suspension_coil dataset
suspensionCoil_data <- read.csv('Suspension_Coil.csv')
head(suspensionCoil_data)
# Create summary table groubped by condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), Maximum_Price=max(price), Num_Vehicles=n())
View(summarize_demo)
# Create summary table grouped by condition
summarize_suspensionCoil <- suspensionCoil_data %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Variance_PSI=var(PSI), SD_PSI=sd(PSI))
summarize_suspensionCoil <- suspensionCoil_data %>% summarize(Mean_PSI=mean(PSI), Median_PSI=median(PSI), Variance_PSI=var(PSI), SD_PSI=sd(PSI))
summarize_suspensionCoil
# Perform t-test to determine if the suspension coil's PSI data is statistically different from the mean population results of 1,500
t.test(suspensionCoil_data$PSI, mu=1500)
setwd("C:/Users/Christian/Desktop/Analysis Projects/R_Analysis_AutosRUs/Challenge")
